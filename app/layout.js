"use client";
import localFont from "next/font/local";
import "./globals.css";
import Header from "./_components/Header";
import { Toaster } from "@/components/ui/sonner";
import { usePathname } from "next/navigation";
import { UpdateCartContext } from "./_context/UpdateCartContext";
import { useState } from "react";
import { PayPalScriptProvider } from "@paypal/react-paypal-js";
import { useEffect } from "react";
import { engage } from "./_api/engage";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

// export const metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({ children }) {
  const params = usePathname();

  // useEffect(() => {
  //   if (window !== undefined && engage !== undefined) {
  //     // Send VIEW event
  //     sendPageViewEvent();
  //     handlePersonalization();
  //   }
  // }, []);

  const sendPageViewEvent = async () => {
    const response = await engage.pageView({
      channel: "WEB",
      currency: "USD",
      pointOfSale: "DK-POS",
      language: "EN",
      page: params === "/" ? "home" : params,
    });

    // For testing and debugging purposes only
    if (response) {
      console.log("bid:", engage.getBrowserId());
    }
  };

  const handlePersonalization = async () => {
    const personalizationData = {
      channel: "WEB",
      currency: "USD",
      pointOfSale: "DK-POS",
      language: "EN",
      friendlyId: "dk_grocery_web",
    };
    const response = await engage.personalize(personalizationData);
    console.log("personalize");
    console.log(response);
  };

  const showHeader =
    params == "/signin" || params == "/create-account" ? false : true;
  const [updateCart, setUpdateCart] = useState(false);
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <UpdateCartContext.Provider value={{ updateCart, setUpdateCart }}>
          {showHeader && <Header />}
          {children}
          <Toaster />
        </UpdateCartContext.Provider>
      </body>
    </html>
  );
}

{
  /* <PayPalScriptProvider
      options={{ clientId: process.env.NEXT_PUBLIC_PAYPAL_CLIENT_ID }}
    >
      <html lang="en">
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >
          <UpdateCartContext.Provider value={{ updateCart, setUpdateCart }}>
            {showHeader && <Header />}
            {children}
            <Toaster />
          </UpdateCartContext.Provider>
        </body>
      </html>
    </PayPalScriptProvider> */
}
